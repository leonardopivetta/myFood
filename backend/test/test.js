const request = require('supertest');
const app = require('../app');
const database = require('../database');

const MenuModel = require('../model/Menu.js')
const OrdineModel = require('../model/Ordine.js')

const ID_RISTORANTE = 'ristorante_testing';

// Applies to all tests in this file
beforeAll(async (done) => {
  // open the mongo connection
  await database.openConnection();

  // start the express app
  app.listen(4001, done);
});

// Applies to all tests in this file
afterAll(async (done) => {

  // try to delete the menu(s) of the test restaurant. we could assume there is at most one 
  // menu associated with the testing restaurant and used #deleteOne(). We're using deleteOne
  await MenuModel.deleteMany({ id_ristorante: ID_RISTORANTE })


  // try to delete all the orders associated with the test restaurant. if all tests succeed, 
  // there won't be any matching order
  await OrdineModel.deleteMany({ id_ristorante: ID_RISTORANTE })

  // close mongo connection
  await database.closeConnection()

  done()
});

describe('Test Menu', () => {

  // the database shouldn't contain the testing menu
  test("/GET /:id_ristorante/api/menu | There shouldn't be any menu", async () => {
    const response = await request(app)
      .get('/' + ID_RISTORANTE + '/api/menu')

    expect(response.status).toBe(400)
  });

  test("/GET /:id_ristorante/api/menu | Should return a menu", async () => {
    // manually insert a menu in the database
    await new MenuModel({
      id_ristorante: ID_RISTORANTE,
      apertura: {
        Lun: [
          {
            start: 8,
            end: 22
          }
        ],
        Mar: [
          {
            start: 8,
            end: 22
          }
        ],
        Mer: [
          {
            start: 8,
            end: 22
          }
        ],
        Gio: [
          {
            start: 8,
            end: 22
          }
        ],
        Ven: [
          {
            start: 8,
            end: 22
          }
        ],
        Sab: [
          {
            start: 8,
            end: 22
          }
        ],
        Dom: [
          {
            start: 8,
            end: 22
          }
        ]
      },
      categorie: [
        {
          id: 1,
          nome: "Primi Piatti",
          piatti: [
            {
              id: 1,
              nome: "Pasta Estiva",
              prezzo: 10,
              immagine: "https://images.unsplash.com/photo-1587206668283-c21d974993c3?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=735&q=80",
              ingredienti: [
                "pasta",
                "pomodorini",
                "basilico",
                "grana a scaglie",
                "vegetariano"
              ]
            }
          ]
        }
      ]
    }).save();


    // we should be able to get the newly created menu
    const response = await request(app)
      .get('/' + ID_RISTORANTE + '/api/menu')

    expect(response.status).toBe(200)

    // check data type and values
    expect(Array.isArray(response.body.apertura)).toBeFalsy();
    expect(Array.isArray(response.body.categorie)).toBeTruthy();
    expect(response.body.id_ristorante).toBe(ID_RISTORANTE);
  });

});

describe('Test Ordini', () => {

  // there shouldn't be any order in the ATTESA_CONFERMA state
  test("GET /:id_ristorante/api/ordini | There shouldn't be any order", async () => {
    const response = await request(app)
      .get('/' + ID_RISTORANTE + '/api/ordini')

    expect(response.status).toBe(200)

    expect(Array.isArray(response.body)).toBeTruthy();
    expect(response.body).toHaveLength(0);
  });

  // objectid of the newly created order document
  var orderObjectId = null;

  // create and insert a new order in the database
  test("/POST /:id_ristorante/api/ordine/inserisci | Insert a new order", async () => {
    const ordine = {
      creazione: "12:30:05 22/1/2021",
      id_ristorante: ID_RISTORANTE,
      orario_consegna: "12-12:30",
      pagato: "njofe3n66fk7sd5nlign56fim5g8mpi87nfg5mp7inpa",
      indirizzo: "povo",
      piatti: [
        {
          nome: "pasta",
          prezzo: 10,
          immagine: "url immagine",
          ingredienti: [
            "pasta"
          ],
          note: "al dente"
        }
      ]
    };

    const response = await request(app)
      .post('/' + ID_RISTORANTE + '/api/ordine/inserisci')
      .send(ordine)

    expect(response.status).toBe(201)

    // get the ObjectID generated by mongo
    orderObjectId = response.body['id'];
  });

  // try insert into the database an order with an invalid body
  test("/POST /:id_ristorante/api/ordine/inserisci | Try to insert an invalid order", async () => {
    const ordine = {
      creazione: "12:30:05 22/1/2021",
      id_ristorante: ID_RISTORANTE,
      orario_consegna: 12, // invalid data type
      pagato: "njofe3n66fk7sd5nlign56fim5g8mpi87nfg5mp7inpa",
      // indirizzo: "povo", // missing indirizzo
      piatti: [
        {
          nome: "pasta",
          prezzo: 10,
          immagine: "url immagine",
          ingredienti: [
            "pasta"
          ],
          note: "al dente"
        }
      ]
    };

    const response = await request(app)
      .post('/' + ID_RISTORANTE + '/api/ordine/inserisci')
      .send(ordine)

    expect(response.status).toBe(400)
  });

  // query all orders in the ATTESA_CONFERMA state. the result should contain only the order created by the test above
  test("/GET /:id_ristorante/api/ordini | There should be exactly 1 order", async () => {
    const response = await request(app)
      .get('/' + ID_RISTORANTE + '/api/ordini')

    expect(response.status).toBe(200)

    expect(Array.isArray(response.body)).toBeTruthy();
    expect(response.body).toHaveLength(1);
  });

  // update the state of the order created by the test above
  test("/POST /:id_ristorante/api/ordine/aggiorna_stato | Update the state of the newly created order", async () => {
    const body = {
      id: orderObjectId,
      stato: "STATO_AGGIORNATO",
    };

    const response = await request(app)
      .post('/api/ordine/aggiorna_stato')
      .send(body)

    expect(response.status).toBe(200)
  });

  // try to get all orders in the ATTESA_CONFERMA state. there shouldn't be any since we've just updated the 
  // state of the only order created in one of the tests above
  test("/GET /:id_ristorante/api/ordini | There shouldn't be any order in the ATTESA_CONFERMA state", async () => {
    const response = await request(app)
      .get('/' + ID_RISTORANTE + '/api/ordini')

    expect(response.status).toBe(200)

    // check data type and values
    expect(Array.isArray(response.body)).toBeTruthy();
    expect(response.body).toHaveLength(0);
  });

  // finally, try to delete the order from the database
  test("DELETE /api/ordine/elimina/:_id | Delete the order", async () => {

    const response = await request(app)
      .delete('/api/ordine/elimina/' + orderObjectId)

    expect(response.status).toBe(200)
  });

  // repeat the same delete operation. the response status should be 400 since we've already deleted that order
  test("DELETE /api/ordine/elimina/:_id | Try to delete an order that doesn't exist", async () => {

    const response = await request(app)
      .del('/api/ordine/elimina/' + orderObjectId)

    expect(response.status).toBe(400)
  });
});
